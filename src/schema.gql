# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Token {
  chainId: Float!
  address: String!
  name: String!
  symbol: String!
  decimals: Float!
  logoUrl: String!
  nativeToken: Boolean!
  type: String!
  balance: String!
  balance24hAgo: String
  quote: Float
  prettyQuote: String
  quoteRate: Float
  quoteRate24hAgo: Float
}

type Attribute {
  trait_type: String!
  value: String!
}

type Nft {
  address: String!
  name: String
  symbol: String
  balance: Int!
  supportsErc: [String!]!
  tokenId: String!
  nftName: String
  description: String
  image: String
  animationUrl: String
  attributes: [Attribute]
}

type TransactionData {
  from: String!
  to: String!
  data: String!
  value: String!
  gasPrice: String!
  gasLimit: String!
}

type ValhaIneractionData {
  approveTx: [TransactionData!]!
  interactionTx: TransactionData!
}

type Query {
  findEvmTokenBalance(address: String!, chainIds: [Int!]!, quoteCurrency: QuoteCurrency!): [Token!]!
  findEvmNftBalance(address: String!, chainId: Int!): [Nft!]!
  valhaZapTransaction(valhaZapInput: ValhaZapInput!): ValhaIneractionData!
}

enum QuoteCurrency {
  USD
  CAD
  EUR
  SGD
  INR
  JPY
  VND
  CNY
  KRW
  RUB
  TRY
  NGN
  ARS
  AUD
  CHF
  GBP
}

input ValhaZapInput {
  chainId: Int!
  walletAddress: String!
  poolAddress: String!
  action: String!
  inputAmount: Float!
  disableCheck: Boolean!
  useValhaRouter: Boolean!
  swapProvider: String!
  swapToken: String!
}