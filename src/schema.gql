# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Token {
  chainId: Float!
  address: String!
  name: String!
  symbol: String!
  decimals: Float!
  logoUrl: String!
  nativeToken: Boolean!
  type: String!
  balance: String!
  balance24hAgo: String
  quote: Float
  prettyQuote: String
  quoteRate: Float
  quoteRate24hAgo: Float
}

type TokenAssetData {
  totalQuote: Float!
  tokenList: [Token!]!
}

type Attribute {
  trait_type: String!
  value: String!
}

type Nft {
  chainId: Float!
  address: String!
  name: String
  symbol: String
  balance: Int!
  supportsErc: [String!]!
  tokenId: String!
  nftName: String
  description: String
  image: String
  animationUrl: String
  attributes: [Attribute]
}

type TransactionData {
  from: String!
  to: String!
  data: String!
  value: String!
  gasPrice: String!
  gasLimit: String!
}

type ValhaIneractionData {
  approveTx: [TransactionData!]!
  interactionTx: TransactionData!
}

type Source {
  name: String!
  proportion: String!
}

type FillData {
  tokenAddressPath: [String!]!
  router: String!
}

type Order {
  makerToken: String!
  takerToken: String!
  makerAmount: String!
  takerAmount: String!
  fillData: FillData!
  source: String!
  sourcePathId: String!
  type: Int!
}

type Quote {
  chainid: Int!
  price: String!
  guaranteedPrice: String!
  to: String!
  data: String!
  value: String!
  expectedSlippage: String
  buyTokenAddress: String!
  buyAmount: String!
  sellTokenAddress: String!
  sellAmount: String!
  sources: [Source!]!
  orders: [Order!]!
  AllownaceTarget: String!
}

type Price {
  chainid: Int!
  price: String!
  value: String!
  buyTokenAddress: String!
  buyAmount: String!
  sellTokenAddress: String!
  sellAmount: String!
  gas: String!
  AllownaceTarget: String!
}

type Query {
  findEvmTokenBalance(address: String!, chainIds: [Int!]!, quoteCurrency: QuoteCurrency!): TokenAssetData!
  findEvmNftBalance(address: String!, chainIds: [Int!]!): [Nft!]!
  valhaZapTransaction(valhaZapInput: ValhaZapInput!): ValhaIneractionData!
  findSwapQuote(chainId: Int!, sellToken: String!, buyToken: String!, sellAmount: String, buyAmount: String, slippagePercentage: String, takerAddress: String): Quote!
  findSwapPrice(chainId: Int!, sellToken: String!, buyToken: String!, sellAmount: String, buyAmount: String, takerAddress: String): Price!
}

enum QuoteCurrency {
  USD
  CAD
  EUR
  SGD
  INR
  JPY
  VND
  CNY
  KRW
  RUB
  TRY
  NGN
  ARS
  AUD
  CHF
  GBP
}

input ValhaZapInput {
  chainId: Int!
  walletAddress: String!
  poolAddress: String!
  action: String!
  inputAmount: Float!
  disableCheck: Boolean!
  useValhaRouter: Boolean!
  swapProvider: String!
  swapToken: String!
}